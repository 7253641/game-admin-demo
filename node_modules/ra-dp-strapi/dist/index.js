'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _queryString = require('query-string');

var _reactAdmin = require('react-admin');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = function (strapi) {
    var httpClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _reactAdmin.fetchUtils.fetchJson;

    /**
     * Gets a list of entries
     * @param {string} resource The resource to fetch
     * @param {Object} params 
     */
    var getList = function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(resource, params) {
            var strapiParams, list, count, _ref2, _ref3, data, total;

            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            // This translates React admin params to strapi params
                            strapiParams = (0, _utils.createGetParams)(params);

                            // Get the list 

                            list = strapi.getEntries(resource, strapiParams);

                            // Get the total
                            // We'll use a hack here till strapi sdk
                            // provides a default way to do this

                            count = strapi.getEntryCount(resource, strapiParams); //httpClient(`${apiUrl}/${resource}/count`);
                            // We put both in a promise instead of waiting for them
                            // Since they can both be done separately

                            _context.next = 5;
                            return Promise.all([list, count]);

                        case 5:
                            _ref2 = _context.sent;
                            _ref3 = _slicedToArray(_ref2, 2);
                            data = _ref3[0];
                            total = _ref3[1];
                            return _context.abrupt('return', { data: data, total: total });

                        case 10:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined);
        }));

        return function getList(_x2, _x3) {
            return _ref.apply(this, arguments);
        };
    }();

    var getOne = function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2(resource, params) {
            var id, data;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            // Just pullout the Id and shove it down strapi's throat
                            id = params.id;

                            // Await the arrival of the resource; bated breath recommended

                            _context2.next = 3;
                            return strapi.getEntry(resource, id);

                        case 3:
                            data = _context2.sent;
                            return _context2.abrupt('return', { data: data });

                        case 5:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined);
        }));

        return function getOne(_x4, _x5) {
            return _ref4.apply(this, arguments);
        };
    }();

    var createEntry = function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee3(resource, params) {
            var data;
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            _context3.next = 2;
                            return strapi.createEntry(resource, params.data);

                        case 2:
                            data = _context3.sent;
                            return _context3.abrupt('return', { data: data });

                        case 4:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, undefined);
        }));

        return function createEntry(_x6, _x7) {
            return _ref5.apply(this, arguments);
        };
    }();

    var updateEntry = function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee4(resource, params) {
            var id, data, entry;
            return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            // Extract id and params
                            id = params.id, data = params.data;
                            _context4.next = 3;
                            return strapi.updateEntry(resource, id, data);

                        case 3:
                            entry = _context4.sent;
                            return _context4.abrupt('return', { data: entry });

                        case 5:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, undefined);
        }));

        return function updateEntry(_x8, _x9) {
            return _ref6.apply(this, arguments);
        };
    }();

    var updateManyEntries = function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee5(resource, params) {
            var ids, data, allUpdates, updates, updatedIds;
            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            ids = params.ids, data = params.data;

                            // update all ids and get the promises

                            allUpdates = ids.map(function (id) {
                                return updateEntry(resource, { id: id, data: data });
                            });

                            // await all updates to complete

                            _context5.next = 4;
                            return Promise.all(allUpdates);

                        case 4:
                            updates = _context5.sent;


                            // get the Ids of all updates
                            updatedIds = updates.map(function (entry) {
                                return entry.id;
                            });
                            return _context5.abrupt('return', { data: updatedIds });

                        case 7:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, undefined);
        }));

        return function updateManyEntries(_x10, _x11) {
            return _ref7.apply(this, arguments);
        };
    }();

    var deleteEntry = function () {
        var _ref8 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee6(resource, params) {
            var id, data;
            return _regenerator2.default.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            // Extract id 
                            id = params.id;

                            // delete the entry

                            _context6.next = 3;
                            return strapi.deleteEntry(resource, id);

                        case 3:
                            data = _context6.sent;
                            return _context6.abrupt('return', { data: data });

                        case 5:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, undefined);
        }));

        return function deleteEntry(_x12, _x13) {
            return _ref8.apply(this, arguments);
        };
    }();

    var deleteManyEntries = function () {
        var _ref9 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee7(resource, params) {
            var ids, allDeletes, deletes, deletedIds;
            return _regenerator2.default.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            ids = params.ids;
                            allDeletes = ids.map(function (id) {
                                return deleteEntry(resource, { id: id });
                            });
                            _context7.next = 4;
                            return Promise.all(allDeletes);

                        case 4:
                            deletes = _context7.sent;
                            deletedIds = deletes.map(function (entry) {
                                return entry.id;
                            });
                            return _context7.abrupt('return', { data: deletedIds });

                        case 7:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, undefined);
        }));

        return function deleteManyEntries(_x14, _x15) {
            return _ref9.apply(this, arguments);
        };
    }();

    var getMany = function () {
        var _ref10 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee8(resource, params) {
            var ids, allRecords, data;
            return _regenerator2.default.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            ids = params.ids;
                            allRecords = ids.map(function (id) {
                                return getOne(resource, { id: id });
                            });
                            _context8.next = 4;
                            return Promise.all(allRecords);

                        case 4:
                            data = _context8.sent;
                            return _context8.abrupt('return', { data: data });

                        case 6:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee8, undefined);
        }));

        return function getMany(_x16, _x17) {
            return _ref10.apply(this, arguments);
        };
    }();

    var getManyReference = function () {
        var _ref11 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee9(resource, params) {
            var target;
            return _regenerator2.default.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            target = params.target;

                            params.filter[target] = params.id;

                            return _context9.abrupt('return', getList(resource, params));

                        case 3:
                        case 'end':
                            return _context9.stop();
                    }
                }
            }, _callee9, undefined);
        }));

        return function getManyReference(_x18, _x19) {
            return _ref11.apply(this, arguments);
        };
    }();

    return function () {
        var _ref12 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee10(type, resource, params) {
            return _regenerator2.default.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            console.log(params);
                            _context10.t0 = type;
                            _context10.next = _context10.t0 === _reactAdmin.GET_LIST ? 4 : _context10.t0 === _reactAdmin.GET_ONE ? 5 : _context10.t0 === _reactAdmin.CREATE ? 6 : _context10.t0 === _reactAdmin.UPDATE ? 7 : _context10.t0 === _reactAdmin.UPDATE_MANY ? 8 : _context10.t0 === _reactAdmin.DELETE ? 9 : _context10.t0 === _reactAdmin.DELETE_MANY ? 10 : _context10.t0 === _reactAdmin.GET_MANY ? 11 : _context10.t0 === _reactAdmin.GET_MANY_REFERENCE ? 12 : 13;
                            break;

                        case 4:
                            return _context10.abrupt('return', getList(resource, params));

                        case 5:
                            return _context10.abrupt('return', getOne(resource, params));

                        case 6:
                            return _context10.abrupt('return', createEntry(resource, params));

                        case 7:
                            return _context10.abrupt('return', updateEntry(resource, params));

                        case 8:
                            return _context10.abrupt('return', updateManyEntries(resource, params));

                        case 9:
                            return _context10.abrupt('return', deleteEntry(resource, params));

                        case 10:
                            return _context10.abrupt('return', deleteManyEntries(resource, params));

                        case 11:
                            return _context10.abrupt('return', getMany(resource, params));

                        case 12:
                            return _context10.abrupt('return', getManyReference(resource, params));

                        case 13:
                            console.error('Action type not found');
                            return _context10.abrupt('return', false);

                        case 15:
                        case 'end':
                            return _context10.stop();
                    }
                }
            }, _callee10, undefined);
        }));

        return function (_x20, _x21, _x22) {
            return _ref12.apply(this, arguments);
        };
    }();
};